#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include <WiFiUdp.h>
#include <ArduinoOTA.h>
#include <RF24.h>
#include <RF24Network.h>

#ifndef STASSID
#define STASSID "ATL-2G"
#define STAPSK  ""
#endif
class Node
{
    public:
        uint16_t data;
        Node *next;
        Node(uint16_t d){
            data=d;
            next=NULL;
        }
};
RF24 radio(2, 4);
RF24Network network(radio);
const uint16_t this_node = 00;       // Address of our node in Octal format
const unsigned long interval = 2000; // How often (in ms) to send 'hello world' to the other unit

unsigned long last_sent;             // When did we last send?
unsigned long packets_sent;          // How many have we sent already

struct payload_t {                   // Structure of our payload
  unsigned long ms;
  unsigned long counter;
};

Node *root;
const char* ssid = STASSID;
const char* password = STAPSK;

Node* insert(Node *head,uint16_t data)
{
   Node* p=new Node(data);
   if(head==NULL){
       head=p;
   }
   else if(head->next==NULL){
       head->next=p;
   }
   else{
       Node *start=head;
       while(start->next!=NULL){
           start=start->next;
       }
       start->next=p;   

   }
        return head;
}
void display(Node *head)
{
  Node *start=head;
  while(start)
  {
      Serial.print(start->data);
      Serial.println("");
      start=start->next;
  }
}
bool contains(Node *head, uint16_t data)
{
  Node *start=head;
  while(start)
  {
    if(data == start->data){
     return true; 
    }
    start=start->next;
  }
  return false;
}
void setup() {
  Serial.begin(115200);
    if (!Serial) {
    // some boards need this because of native USB capability
  }
  Serial.println(F("RF24Network/examples/helloworld_tx/"));
  Serial.println("Booting");
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
    if (!radio.begin()) {
    Serial.println(F("Radio hardware not responding!"));
    while (1) {
      // hold in infinite loop
    }
  }
  network.begin(/*channel*/ 90, /*node address*/ this_node);
  while (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("Connection Failed! Rebooting...");
    delay(5000);
    ESP.restart();
  }

  // Port defaults to 8266
  // ArduinoOTA.setPort(8266);

  // Hostname defaults to esp8266-[ChipID]
  // ArduinoOTA.setHostname("myesp8266");

  // No authentication by default
  // ArduinoOTA.setPassword("admin");

  // Password can be set with it's md5 value as well
  // MD5(admin) = 21232f297a57a5a743894a0e4a801fc3
  // ArduinoOTA.setPasswordHash("21232f297a57a5a743894a0e4a801fc3");

  ArduinoOTA.onStart([]() {
    String type;
    if (ArduinoOTA.getCommand() == U_FLASH) {
      type = "sketch";
    } else { // U_FS
      type = "filesystem";
    }

    // NOTE: if updating FS this would be the place to unmount FS using FS.end()
    Serial.println("Start updating " + type);
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) {
      Serial.println("Auth Failed");
    } else if (error == OTA_BEGIN_ERROR) {
      Serial.println("Begin Failed");
    } else if (error == OTA_CONNECT_ERROR) {
      Serial.println("Connect Failed");
    } else if (error == OTA_RECEIVE_ERROR) {
      Serial.println("Receive Failed");
    } else if (error == OTA_END_ERROR) {
      Serial.println("End Failed");
    }
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  ArduinoOTA.handle();
  network.update(); // Check the network regularly

  unsigned long now = millis();

  while (network.available()) {      // Is there anything ready for us?
    RF24NetworkHeader header;        // If so, grab it and print it out
    payload_t payload;
    network.read(header, &payload, sizeof(payload));
    if(root == NULL){
      root = new Node(header.from_node);
    }else{
      if(!contains(root, header.from_node)){
        root = insert(root, header.from_node);
      }
    }
    Serial.print("Received packet #");
    Serial.print(payload.counter);
    Serial.print(" from node #");
    Serial.print(header.from_node);
    Serial.print(" at ");
    Serial.println(payload.ms);
    display(root);
  }
}
